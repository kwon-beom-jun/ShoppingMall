<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.5.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.shop</groupId>
	<artifactId>shop-api</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>shop-api</name>
	<description>Spring-Boot Shopping Mall Project</description>
	<properties>
		<java.version>11</java.version>
	</properties>
	<dependencies>

		<!-- Spring -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<!-- 객체의 값을 효율적으로 관리 -->
			<!-- 빈 검증 어노테이션이 몇가지 있음 -->
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>

		<!-- Spring Security -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Jwt -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-api</artifactId>
			<version>0.11.2</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-impl</artifactId>
			<version>0.11.2</version>
		</dependency>
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt-jackson</artifactId>
			<version>0.11.2</version>
		</dependency>

		<!-- Database -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<scope>runtime</scope>
		</dependency>

		<!-- lombok -->
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>

		<!-- Querydsl : JPQL 코드 작성 도우미(+컴파일러 도움 요청) -->
		<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-jpa</artifactId>
			<version>4.3.1</version>
		</dependency>
		<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-apt</artifactId>
			<version>4.3.1</version>
		</dependency>

		<!-- WebSocket 설정 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>

		<!-- Spring Boot Devtools -->
		<!-- Automatic Restart : classpath 내부 파일이 변경될 때마다 애플리케이션 자동 재시작 -->
		<!-- Live Reload : 정적자원(html, css, js) 수정 시 새로고침 없이 바로 적용 -->
		<!-- Property Defaults : Thymeleaf의 성능 향상 기능인 캐싱 기능을 사용하지만
								 개발 과정때 캐싱 기능을 사용한다면 수정한 소스가 제대로 반영되지 않을 수 있기 때문에
								 cache 기본값을 false로 설정 할 수 있음 -->
		<!-- 현재 항목이 보이지 않음(유로버전이 아니여서?) -->
		<!--
			설정방법
				<Shift>x2 → registry → compiler.automake.allow.when.app.running
		 		[file]-[Settings]-[Build], [Execution], [Deployment]-[Compiler] → Build project automatically 체크
		 		application.properties
		 			# Live Reload 기능 활성화
		 			spring.devtools.livereload.enabled=true
		 			# Thymeleaf cache 사용 중지
		 			spring.thymeleaf.cache-false
				브라우저 LiveReload 확장프로그램 설치
		 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>

		<!-- Thymeleaf Layout Dialect -->
		<!-- 하나의 레이아웃을 여러 페이지에 똑같이 적용이 가능 -->
		<!-- 공통적으로 적용되는 레이아웃을 미리 만들고 현재 작성중인 페이지만 레이아웃에 끼워넣음 -->
		<dependency>
			<groupId>nz.net.ultraq.thymeleaf</groupId>
			<artifactId>thymeleaf-layout-dialect</artifactId>
			<version>2.5.1</version>
		</dependency>
		<dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity5</artifactId>
		</dependency>

		<!-- 서로 다른 클래스의 값을 필드의 이름과 자료형이 같으면 getter, setter를 통해 값을 복사해서 객체를 반환 -->
		<!-- DTO 객체를 엔티티 객체로, 엔티티 객체를 DTO 객체로 변환해주는 작업을 도와주는 라이브러리 -->
		<!-- 멤버 변수가 많아지면 상당한 시간을 소모하므로 사용됨 -->
		<dependency>
			<groupId>org.modelmapper</groupId>
			<artifactId>modelmapper</artifactId>
			<version>2.3.9</version>
		</dependency>

	</dependencies>

	<build>
		<plugins>

		<!-- Qdomain 자바 코드를 생성하는 플러그인 -->
			<!-- Querydsl을 통해서 쿼리를 생성할 때 Qdomain 객체를 사용 -->
			<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources/java</outputDirectory>
							<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>
